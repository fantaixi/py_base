# 字符串，就是由零个或多个字符组成的有限序列，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。
s1 = 'hello, world!'
s2 = "hello, world!"
# 以三个双引号或单引号开头的字符串可以折行
s3 = """
hello, 
world!
"""
print(s1, s2, s3, end='')

"""
可以在字符串中使用\（反斜杠）来表示转义，也就是说\后面的字符不再是它原来的意义，
例如：\n不是代表反斜杠和字符n，而是表示换行；
而\t也不是代表反斜杠和字符t，而是表示制表符。
所以如果想在字符串中表示'要写成\'，同理想表示\要写成\\。
"""

# \'在字符串中表示一个单引号字符，而不是字符串的边界
s3 = '\'hello,world\''
# \\会被解析为一个反斜杠，而\n会被解析为一个换行符
s4 = '\n\\hello\\\n'
print(s3,s4,end="")

# 在\后面还可以跟一个八进制或者十六进制数来表示字符，
# 例如\141和\x61都代表小写字母a，前者是八进制的表示法，后者是十六进制的表示法。
# 也可以在\后面跟Unicode字符编码来表示字符

s1 = '\141\142\143\x61\x62\x63'
s2 = '\u9a86\u660a'
print(s1, s2,end=" ")
print()
print("--------------------------")

# 如果不希望字符串中的\表示转义，我们可以通过在字符串的最前面加上字母r来加以说明
s1 = r'\'hello, world!\''
s2 = r'\n\\hello, world!\\\n'
print(s1, s2, end='')
print()
print("------------------------------")
# 可以使用+运算符来实现字符串的拼接，可以使用*运算符来重复一个字符串的内容，
# 可以使用in和not in来判断一个字符串是否包含另外一个字符串（成员运算），
# 我们也可以用[]和[:]运算符从字符串取出某个字符或某些字符（切片运算）

# 切片操作符在python中的原型是
# [start:stop:step]
# 即：[开始索引:结束索引:步长值]
# 开始索引：同其它语言一样，从0开始。序列从左向右方向中，第一个值的索引为0,最后一个为-1
# 结束索引：切片操作符将取到该索引为止，不包含该索引的值。
# 步长值：默认是一个接着一个切取，如果为2,则表示进行隔一取一操作。步长值为正时表示从左向右取，如果为负，则表示从右向左取。步长值不能为0

s1 = 'hello' * 3
print(s1)
s2 = 'world'
s1 += s2
print(s1)
print("ll" in s1)
print("aab" in s1)
str2 = "abc123456"
# 从字符串中取出指定位置的字符（下标运算）
print(str2[2]) # c
# 字符串切片(从指定的开始索引到指定的结束索引)
print(str2[2:5]) # c12
print(str2[2:]) # c123456
"""
在Python中，`::`用于切片操作，表示从序列的开始到结束，步长为默认值1。例如，`s[::]`会返回字符串`s`的一个完整副本。
如果你在两个冒号之间添加一个数字，例如`::2`，那么这将改变切片的步长。例如，`s[::2]`将返回从`s`中每隔一个元素取出的字符组成的字符串。
如果步长为负数，例如`::-1`，那么切片将从序列的末尾开始，向序列的开头方向取值。例如，`s[::-1]`将返回字符串`s`的一个反向副本。
总的来说，`::`在切片操作中用于指定步长，可以用来控制切片是从序列的哪一端开始，以及取值的间隔¹。希望这个解释对你有所帮助！
"""
print(str2[2::2]) # c246
print(str2[::2]) # ac246
print(str2[2::])  # c123456
print(str2[::-1]) # 654321cba
#  负索引表示从字符串的末尾开始计数，-1表示最后一个字符，-2表示倒数第二个字符，以此类推
print(str2[-3:-1]) # 45



